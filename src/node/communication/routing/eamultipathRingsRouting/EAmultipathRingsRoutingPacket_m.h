//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/eamultipathRingsRouting/EAmultipathRingsRoutingPacket.msg.
//

#ifndef _EAMULTIPATHRINGSROUTINGPACKET_M_H_
#define _EAMULTIPATHRINGSROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/eamultipathRingsRouting/EAmultipathRingsRoutingPacket.msg:19</tt> by nedtool.
 * <pre>
 * enum eamultipathRingsRoutingPacketDef
 * {
 * 
 *     MPRINGS_DATA_PACKET = 1;
 *     MPRINGS_TOPOLOGY_SETUP_PACKET = 2;
 *     MPRINGS_ENERGY_PACKET = 3;
 * }
 * </pre>
 */
enum eamultipathRingsRoutingPacketDef {
    MPRINGS_DATA_PACKET = 1,
    MPRINGS_TOPOLOGY_SETUP_PACKET = 2,
    MPRINGS_ENERGY_PACKET = 3
};

/**
 * Class generated from <tt>src/node/communication/routing/eamultipathRingsRouting/EAmultipathRingsRoutingPacket.msg:25</tt> by nedtool.
 * <pre>
 * packet EAmultipathRingsRoutingPacket extends RoutingPacket
 * {
 *     int eamultipathRingsRoutingPacketKind @enum(eamultipathRingsRoutingPacketDef);	// 1 byte
 *     int sinkID;			// 2 bytes
 *     int senderLevel;	// 1 byte
 *     double energyLevel;
 *     double harvestingRate;
 * 
 * 	//DATA packet overhead contains all fields, making its total size 13 bytes
 * 	//SETUP packet does not contain sequence number field, making its size 12 bytes
 * }
 * </pre>
 */
class EAmultipathRingsRoutingPacket : public ::RoutingPacket
{
  protected:
    int eamultipathRingsRoutingPacketKind_var;
    int sinkID_var;
    int senderLevel_var;
    double energyLevel_var;
    double harvestingRate_var;

  private:
    void copy(const EAmultipathRingsRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EAmultipathRingsRoutingPacket&);

  public:
    EAmultipathRingsRoutingPacket(const char *name=NULL, int kind=0);
    EAmultipathRingsRoutingPacket(const EAmultipathRingsRoutingPacket& other);
    virtual ~EAmultipathRingsRoutingPacket();
    EAmultipathRingsRoutingPacket& operator=(const EAmultipathRingsRoutingPacket& other);
    virtual EAmultipathRingsRoutingPacket *dup() const {return new EAmultipathRingsRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getEamultipathRingsRoutingPacketKind() const;
    virtual void setEamultipathRingsRoutingPacketKind(int eamultipathRingsRoutingPacketKind);
    virtual int getSinkID() const;
    virtual void setSinkID(int sinkID);
    virtual int getSenderLevel() const;
    virtual void setSenderLevel(int senderLevel);
    virtual double getEnergyLevel() const;
    virtual void setEnergyLevel(double energyLevel);
    virtual double getHarvestingRate() const;
    virtual void setHarvestingRate(double harvestingRate);
};

inline void doPacking(cCommBuffer *b, EAmultipathRingsRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EAmultipathRingsRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _EAMULTIPATHRINGSROUTINGPACKET_M_H_

