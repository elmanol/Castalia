//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/application/multiRingsApp/MultiRingDataPacket.msg.
//

#ifndef _MULTIRINGDATAPACKET_M_H_
#define _MULTIRINGDATAPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "ApplicationPacket_m.h"
// }}

/**
 * Struct generated from src/node/application/multiRingsApp/MultiRingDataPacket.msg:19 by nedtool.
 */
struct MultiRingData
{
    MultiRingData();
    unsigned short nodeID;
    double locX;
    double locY;
};

void doPacking(cCommBuffer *b, MultiRingData& a);
void doUnpacking(cCommBuffer *b, MultiRingData& a);

/**
 * Class generated from <tt>src/node/application/multiRingsApp/MultiRingDataPacket.msg:25</tt> by nedtool.
 * <pre>
 * packet MultiRingDataPacket extends ApplicationPacket
 * {
 *     MultiRingData extraData;
 * }
 * </pre>
 */
class MultiRingDataPacket : public ::ApplicationPacket
{
  protected:
    MultiRingData extraData_var;

  private:
    void copy(const MultiRingDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MultiRingDataPacket&);

  public:
    MultiRingDataPacket(const char *name=NULL, int kind=0);
    MultiRingDataPacket(const MultiRingDataPacket& other);
    virtual ~MultiRingDataPacket();
    MultiRingDataPacket& operator=(const MultiRingDataPacket& other);
    virtual MultiRingDataPacket *dup() const {return new MultiRingDataPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MultiRingData& getExtraData();
    virtual const MultiRingData& getExtraData() const {return const_cast<MultiRingDataPacket*>(this)->getExtraData();}
    virtual void setExtraData(const MultiRingData& extraData);
};

inline void doPacking(cCommBuffer *b, MultiRingDataPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MultiRingDataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _MULTIRINGDATAPACKET_M_H_

