//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/stableRouting/StableRoutingPacket.msg.
//

#ifndef _STABLEROUTINGPACKET_M_H_
#define _STABLEROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/stableRouting/StableRoutingPacket.msg:11</tt> by nedtool.
 * <pre>
 * enum StablePacketDef
 * {
 * 
 *     STABLE_DATA_PACKET = 0;       // data packet
 * }
 * </pre>
 */
enum StablePacketDef {
    STABLE_DATA_PACKET = 0
};

/**
 * Class generated from <tt>src/node/communication/routing/stableRouting/StableRoutingPacket.msg:15</tt> by nedtool.
 * <pre>
 * packet StablePacket extends RoutingPacket
 * {
 *     int packetId;
 *     int StablePacketKind @enum(StablePacketDef);
 *     Point destLocation;
 * }
 * </pre>
 */
class StablePacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    int StablePacketKind_var;
    Point destLocation_var;

  private:
    void copy(const StablePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StablePacket&);

  public:
    StablePacket(const char *name=NULL, int kind=0);
    StablePacket(const StablePacket& other);
    virtual ~StablePacket();
    StablePacket& operator=(const StablePacket& other);
    virtual StablePacket *dup() const {return new StablePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getStablePacketKind() const;
    virtual void setStablePacketKind(int StablePacketKind);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<StablePacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
};

inline void doPacking(cCommBuffer *b, StablePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StablePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/stableRouting/StableRoutingPacket.msg:21</tt> by nedtool.
 * <pre>
 * packet DiscoverHolePacket extends RoutingPacket
 * {
 *     int originatorId;
 *     Point ballCenter;
 *     int previousId;
 *     string path;
 * }
 * </pre>
 */
class DiscoverHolePacket : public ::RoutingPacket
{
  protected:
    int originatorId_var;
    Point ballCenter_var;
    int previousId_var;
    opp_string path_var;

  private:
    void copy(const DiscoverHolePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DiscoverHolePacket&);

  public:
    DiscoverHolePacket(const char *name=NULL, int kind=0);
    DiscoverHolePacket(const DiscoverHolePacket& other);
    virtual ~DiscoverHolePacket();
    DiscoverHolePacket& operator=(const DiscoverHolePacket& other);
    virtual DiscoverHolePacket *dup() const {return new DiscoverHolePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getOriginatorId() const;
    virtual void setOriginatorId(int originatorId);
    virtual Point& getBallCenter();
    virtual const Point& getBallCenter() const {return const_cast<DiscoverHolePacket*>(this)->getBallCenter();}
    virtual void setBallCenter(const Point& ballCenter);
    virtual int getPreviousId() const;
    virtual void setPreviousId(int previousId);
    virtual const char * getPath() const;
    virtual void setPath(const char * path);
};

inline void doPacking(cCommBuffer *b, DiscoverHolePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DiscoverHolePacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _STABLEROUTINGPACKET_M_H_

